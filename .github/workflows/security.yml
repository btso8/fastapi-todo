name: Security Scan

on:
  pull_request:
  push:
    branches: [ "main" ]

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.12"
  IMAGE_TAG: security-${{ github.sha }}
  SECURITY_GATE: "on"   # set to "off" to avoid failing while you remediate

jobs:
  deps_and_static:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install tooling
        run: |
          python -m pip install -U pip
          pip install pip-audit bandit

      - name: pip-audit (deps)
        run: |
          set -o pipefail
          pip-audit -r requirements.txt -f json > pip-audit.json || true

      - name: Upload pip-audit report
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit.json
          path: pip-audit.json

      - name: Bandit (code SAST)
        run: bandit -q -r app || true

      - name: Enforce SECURITY_GATE for pip-audit (HIGH/CRITICAL)
        if: env.SECURITY_GATE == 'on'
        shell: bash
        run: |
          python - <<'PY'
          import json, sys
          from pathlib import Path

          p = Path("pip-audit.json")
          if not p.exists():
              sys.exit(0)

          raw = p.read_text().strip()
          if not raw:
              sys.exit(0)

          try:
            data = json.loads(raw)
          except Exception:
            # not valid JSON (e.g., pip-audit printed a message) -> don't block
            sys.exit(0)

          sev_order = {"LOW":1, "MEDIUM":2, "HIGH":3, "CRITICAL":4}
          def sev_num(sev):
            return sev_order.get(str(sev).upper(), 0) if sev else 0

          worst = 0

          if isinstance(data, list):
            for item in data:
              if not isinstance(item, dict):
                continue
              vulns = item.get("vulns") or item.get("vulnerabilities") or []
              for v in vulns:
                worst = max(worst, sev_num(v.get("severity") or v.get("severity_name")))
          elif isinstance(data, dict):
            for item in data.get("dependencies", []):
              if not isinstance(item, dict):
                continue
              vulns = item.get("vulns") or item.get("vulnerabilities") or []
              for v in vulns:
                worst = max(worst, sev_num(v.get("severity") or v.get("severity_name")))
            for v in data.get("vulnerabilities", []):
              worst = max(worst, sev_num(v.get("severity")))

          if worst >= 3:  # HIGH or CRITICAL
            print("Found HIGH/CRITICAL dependency vulns. Failing as SECURITY_GATE=on.")
            sys.exit(1)
          else:
            print("No HIGH/CRITICAL dependency vulns.")
            sys.exit(0)
          PY

  image_lint_and_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Dockerfile lint (Hadolint)
        uses: hadolint/hadolint-action@v3.3.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (local only)
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: fastapi-todo:${{ env.IMAGE_TAG }}

      - name: Trivy image scan (HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: fastapi-todo:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
        continue-on-error: ${{ env.SECURITY_GATE == 'off' }}
