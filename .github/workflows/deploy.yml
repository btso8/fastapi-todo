name: CI (PR) + Deploy (main)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  id-token: write   # for OIDC -> AWS STS
  contents: read

env:
  AWS_REGION: eu-west-2
  ECR_REGISTRY: 975705622152.dkr.ecr.eu-west-2.amazonaws.com
  ECR_REPOSITORY: btso8/fastapi-todo
  IMAGE_URI: 975705622152.dkr.ecr.eu-west-2.amazonaws.com/btso8/fastapi-todo

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          [ -f requirements-test.txt ] && pip install -r requirements-test.txt || true

      - name: Run pytest
        run: pytest -q

  deploy:
    name: Build → Push to ECR → (Auto)Deploy App Runner
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    env:
      SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push Docker image
        run: |
          set -euo pipefail
          GIT_SHA="${{ github.sha }}"
          docker build -t "$IMAGE_URI:latest" -t "$IMAGE_URI:$GIT_SHA" .
          docker push "$IMAGE_URI:latest"
          docker push "$IMAGE_URI:$GIT_SHA"

      - name: Install AWS CLI (for App Runner command)
        run: |
          curl -sSLo awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
          unzip -q awscliv2.zip
          sudo ./aws/install --update

      - name: Trigger App Runner deployment (optional)
        if: env.SERVICE_ARN != ''
        run: aws apprunner start-deployment --service-arn "$SERVICE_ARN"
